buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }    
    }
    dependencies {
        classpath "org.eclipse.jgit:org.eclipse.jgit:4.0.0.201505050340-m2"
        classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
        classpath "org.ajoberstar:gradle-git:1.3.0"
    }
}
apply plugin: "forge"

//Load properties
file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

//Get Github commit hash
import org.ajoberstar.grgit.*
ext.repo = Grgit.open(project.file("."))

task tagRelease << {
  repo.tag.add {
    name = version
    message = "Release of ${version}"
  }
}

//Version
version = "${config.minecraft.version}-${config.yadm.version}-${repo.head().abbreviatedId}"
group= "de.alaoli.games.minecraft.mods.yadm" 
archivesBaseName = "yadm"

sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8

repositories {
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }  
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    compile "com.eclipsesource.minimal-json:minimal-json:0.9.+"
    
    shade "org.spongepowered:mixin:0.6.+"
}

minecraft {
    mappings = "stable_12"
    version = "${config.forge.version}"
    runDir = "eclipse"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", "${config.yadm.version}"
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
                
        // replace version and mcversion
        expand "version":"${config.yadm.version}", "mcversion":project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + "mixins.yadm.refmap.json"

jar {
    version = project.version
    manifest {
        attributes( 
	        "FMLCorePlugin": "de.alaoli.games.minecraft.mods.yadm.YADMLoadingPlugin", 
	        "FMLCorePluginContainsFMLMod": "true",
	        "ForceLoadAsMod": "true",
	        "MixinCompatibilityLevel": "JAVA_8",
	        "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
	        "TweakOrder": "0",
	        "MixinConfigs": "mixins.yadm.json"
        )
   }
   configurations.shade.copyRecursive().setTransitive(false).each { artifact -> from (zipTree(artifact)) }
   from refMap
}


def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

afterEvaluate {
    tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${refMap}"] 
}

reobf {
    addExtraSrgFile mixinSrg
    reobf (jar) { reobfSpec ->
        reobfSpec.classpath = sourceSets.main.compileClasspath
    }
}
